# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# OAuth2 Stuff
GET        /_oauth-callback        services.OAuth2.callback(code: Option[String], state: Option[String])
GET        /_oauth-success         services.OAuth2.success
GET        /_external-oauth        services.OAuth2.redirectToExternalAuthServer(requestUri: String)
GET        /login                  controllers.AuthenticationController.login
GET        /logout                 controllers.AuthenticationController.logout

# Home and informational page
GET     /                           controllers.Application.index
#GET     /explain                    controllers.Application.explain
GET     /about                      controllers.Application.about
GET     /feedback                   controllers.Application.feedback
POST    /feedback                   controllers.Application.takeFeedback

# Publisher pages
GET     /publishers                 controllers.Application.publishers
GET     /publishers/browse          controllers.Application.publisherBrowse(filter: String, value: String, page: Int ?= 0)
GET     /publisher/:id              controllers.Application.publisher(id: Int)
GET     /publishers/create          controllers.Application.newPublisher
GET     /publisher/:id/create       controllers.Application.newCollection(id: Int)
GET     /publisher/:id/edit         controllers.Application.editPublisher(id: Int)
POST    /publishers                 controllers.Application.createPublisher
POST    /publisher/:id              controllers.Application.createCollection(id: Int)
GET     /publisher/:id/createH      controllers.Application.newHarvest(id: Int)
GET     /publisher/:id/createC      controllers.Application.newCull(id: Int)
POST    /harvest/:id                controllers.Application.createHarvest(id: Int)

# Collection pages
GET     /collections                controllers.Application.collections

# Harvest pages
GET     /harvest/:id                controllers.Application.harvest(id: Int)
GET     /harvest/:id/start          controllers.Application.startHarvest(id: Int)
GET     /harvest/:id/delete         controllers.Application.deleteHarvest(id: Int)
GET     /knip/:cid/:hid/:oid        controllers.Application.pullKnownItem(cid: Int, hid: Int, oid: String, force: Boolean ?= false)
GET     /harvests/startall/:key     controllers.Application.startAllHarvests(key: String)

# Cull pages
GET     /cull/:id                controllers.Application.cull(id: Int)
POST    /cull/:pid               controllers.Application.createCull(pid: Int)
GET     /cull/:id/start          controllers.Application.startCull(id: Int)
GET     /cull/:id/delete         controllers.Application.deleteCull(id: Int)
GET     /knix/:cid/:oid          controllers.Application.expungeKnownItem(cid: Int, oid: String, policy: String ?= "soft")
GET     /culls/startall/:key     controllers.Application.startAllCulls(key: String)

# Scheme pages
GET     /schemes                    controllers.Application.schemes
GET     /scheme/:id                 controllers.Application.scheme(id: Int)
GET     /scheme/:id/edit            controllers.Application.editScheme(id: Int)
GET     /schemes/create             controllers.Application.newScheme
POST    /schemes                    controllers.Application.createScheme

# Finder pages
GET     /scheme/:tag/finders        controllers.Application.finders(tag: String)
GET     /scheme/:tag/create         controllers.Application.newFinder(tag: String)
POST    /scheme/:tag                controllers.Application.createFinder(tag: String)
GET     /scheme/:tag/finder/:id/delete  controllers.Application.deleteFinder(tag: String, id: Int)

# Validator pages

GET     /scheme/:tag/createvalidator       controllers.Application.newValidator(tag: String)
#GET     /testvalidator                  controllers.Application.testValidator
#POST    /testvalidator                  controllers.Application.runTestValidator
POST    /scheme/:tag/validator             controllers.Application.createValidator(tag: String)
GET     /scheme/:tag/validator/:id/delete  controllers.Application.deleteValidator(tag: String, id: Int)

# Content Type pages
GET     /ctypes                     controllers.Application.contentTypes
GET     /ctype/:id                  controllers.Application.contentType(id: Int)
GET     /ctypes/create              controllers.Application.newContentType
POST    /ctypes                     controllers.Application.createContentType
POST    /ctype/:id/scheme           controllers.Application.addContentTypeScheme(id: Int, relation: String)
GET     /ctype/:id/scheme           controllers.Application.removeContentTypeScheme(id: Int, sid: Int, relation: String)
#POST    /ctypei/:id                 controllers.Application.newCtypeIndex(id: Long)
#POST    /ctypet/:id                 controllers.Application.newCtypeTopic(id: Long)

# Content Format pages
GET     /cformats                   controllers.Application.contentFormats
GET     /cformat/:id                controllers.Application.contentFormat(id: Int)
GET     /cformats/create            controllers.Application.newContentFormat
POST    /cformats                   controllers.Application.createContentFormat

# Content Profile pages
GET     /cprofiles                   controllers.Application.contentProfiles
GET     /cprofile/:id                controllers.Application.contentProfile(id: Int)
GET     /cprofiles/create            controllers.Application.newContentProfile
POST    /cprofiles                   controllers.Application.createContentProfile
POST    /cprofile/:id/scheme         controllers.Application.addContentProfileScheme(id: Int)
GET     /cprofile/:id/scheme         controllers.Application.removeContentProfileScheme(id: Int, sid: Int)

# Resource Map pages
GET     /resmaps                    controllers.Application.resourceMaps
GET     /resmap/:id                 controllers.Application.resourceMap(id: Int)
GET     /resmaps/create             controllers.Application.newResourceMap
POST    /resmaps                    controllers.Application.createResourceMap
POST    /resmap/:id                 controllers.Application.newResourceMapping(id: Int)
GET     /resmap/:id/scheme          controllers.Application.removeResourceMapping(id: Int, sid: Int, source: String)

# Item pages
#GET     /items                       controllers.Application.items
#GET     /items/search                controllers.Application.itemSearch(topicId: String, page: Int)
GET     /items/browse                controllers.ItemController.itemBrowse(filter: String, id: Int, page: Int ?= 0)
GET     /item/:id                    controllers.ItemController.item(id: Int)
GET     /item/package/:id            controllers.ItemController.itemPackage(id: Int)
GET     /item/deposit/:id            controllers.ItemController.itemDeposit(id: Int)
GET     /item/mets/:id               controllers.ItemController.itemMets(id: Int)
GET     /items/missingtopics         controllers.ItemController.itemsWithNoTopics
GET     /item/delete/:id             controllers.ItemController.delete(id: Int)

# Topic pages
GET     /topics                      controllers.Application.topics
GET     /topic/:id                   controllers.Application.topic(id: Int)
GET     /topic/:id/subscribe         controllers.Application.topicSubscribe(id: Int, cancel: Boolean ?= false)
GET     /topics/browse               controllers.Application.topicBrowse(id: Int, page: Int ?= 0)
POST    /topic/:sid/validate         controllers.Application.topicValidate(sid: Int)

# Subscriber pages
GET     /subscribers                controllers.Application.subscribers
GET     /subscribers/browse         controllers.Application.subscriberBrowse(filter: String, value: String, page: Int ?= 0)
GET     /subscribers/create         controllers.Application.newSubscriber
POST    /subscribers                controllers.Application.createSubscriber
GET     /subscriber/:id/edit        controllers.Application.editSubscriber(id: Int)
GET     /subscriber/:id             controllers.Application.subscriber(id: Int)

# Subscriber User Pages
GET     /subscribers/join               controllers.Application.joinSubscriber
POST    /subscribers/request            controllers.Application.joinRequest
GET     /subscriber/:id/users           controllers.Application.subscriberUsers(id: Int)
GET     /subscriber/:id/resolve/:user   controllers.Application.subscriberResolveUser(id: Int, user: Int, res: String)
GET     /subscriber/:id/remove/:user    controllers.Application.subscriberRemoveUser(id: Int, user: Int)
GET     /subscriber/:id/toggleadmin/:user controllers.Application.subscriberToggleAdmin(id: Int, user: Int)
GET     /subscriber/:id/updatesession   controllers.Application.updateSessionSubscriber(id: Int)

# Dashboards
GET     /dashboard                  controllers.Application.subscriberDashboard
GET     /myaccount                  controllers.Application.userDashboard

# Subscriber Interest pages
GET     /interests/browse           controllers.Application.interestBrowse(filter: String, value: String, page: Int ?= 0)
POST    /interests/:sid             controllers.Application.addSubscriberInterest(sid: Int, scheme: String)
GET     /interests/:sid/remove/:iid  controllers.Application.removeSubscriberInterest(sid: Int, iid: Int)

# Channel Pages
GET     /channel/:id                controllers.Application.channel(id: Int)
GET     /channels/:sid/create       controllers.Application.newChannel(sid: Int)
POST    /subscriber/:sid/channels   controllers.Application.createChannel(sid: Int)

# Subscriber Plan pages
GET     /plan/:id                   controllers.Application.plan(id: Int)
GET     /plans/:sid/create          controllers.Application.newPlan(sid: Int)
POST    /plans/:sid                 controllers.Application.createPlan(sid: Int)
DELETE  /plan/:id                   controllers.Application.deletePlan(id: Int)
POST    /plan/:id                   controllers.Application.addPlanScheme(id: Int)
GET     /plan/:id/remove/:sid       controllers.Application.removePlanScheme(id: Int, sid: Int)
POST    /plan/:id/channel           controllers.Application.setPlanChannel(id: Int)

# Subscription pages
GET     /subscriptions/browse       controllers.Application.subscriptionBrowse(filter: String, value: Int, page: Int ?= 0)

# Review (holds) pages
GET     /holds/browse               controllers.Application.holdBrowse(id: Int, page: Int ?= 0)
GET     /hold/:id/resolve           controllers.Application.resolveHold(id: Int, accept: Boolean)

# Topic Pick pages
GET     /picks/browse               controllers.Application.pickBrowse(id: Int, page: Int ?= 0)
GET     /pick/:id/resolve           controllers.Application.resolvePick(id: Int, accept: Boolean)

# Search pages
GET     /search                     controllers.Search.index
GET     /search/results             controllers.Search.results(q: String, target: String ?="topic", page: Int ?=0, perpage: Int ?=25)

# Administrative services
GET     /reindex/:dtype              controllers.Application.reindex(dtype: String)
GET     /workbench                   controllers.Application.workbench
GET     /purge                       controllers.Application.purge
GET     /sandbox                     controllers.Application.sandbox
POST    /testExpression              controllers.Application.testExpression

# hub model services & page
GET     /cmodel                      controllers.Application.contentModel
GET     /pubmodel                    controllers.Application.publisherModel
GET     /model/create                controllers.Application.newHubModel
POST    /cmodel                      controllers.Application.addContentModel
POST    /pubmodel                    controllers.Application.addPublisherModel
GET     /submodel                    controllers.Application.subscriberModel
POST    /submodel                    controllers.Application.addSubscriberModel

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
